package com.smartfoodhcmut.controller.admin.api;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.tomcat.util.http.fileupload.FileItem;
import org.apache.tomcat.util.http.fileupload.FileItemFactory;
import org.apache.tomcat.util.http.fileupload.RequestContext;
import org.apache.tomcat.util.http.fileupload.disk.DiskFileItemFactory;
import org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.smartfoodhcmut.model.FoodsModel;
import com.smartfoodhcmut.model.UserModel;
import com.smartfoodhcmut.service.IFoodsService;
import com.smartfoodhcmut.utils.HttpUtil;
import com.smartfoodhcmut.utils.SessionUtil;

@WebServlet(urlPatterns = {"/api-admin-foods"})
public class FoodsAPI extends HttpServlet {

	
	@Inject
	private IFoodsService foodsService;
	private static final long serialVersionUID = 2535844104962403259L;
    static final String SAVE_DIR = "D:/CNPM-SmartFood-master/CNPM-SmartFood-master/workspace/smartfood-06-2020/src/main/webapp/views/web/image/";
    static final int BUFFER_SIZE = 4096;
     
	protected void doPost(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {

		String fileName = request.getHeader("thumbnail");
        File saveFile = new File(SAVE_DIR + fileName);
         
        // prints out all header values
        System.out.println("===== Begin headers =====");
        Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String headerName = names.nextElement();
            System.out.println(headerName + " = " + request.getHeader(headerName));        
        }
        System.out.println("===== End headers =====\n");
         
        // opens input stream of the request for reading data
        InputStream inputStream = request.getInputStream();
         
        // opens an output stream for writing file
        FileOutputStream outputStream = new FileOutputStream(saveFile);
         
        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead = -1;
        System.out.println("Receiving data...");
         
        while ((bytesRead = inputStream.read(buffer)) != -1) {
            outputStream.write(buffer, 0, bytesRead);
        }
         
        System.out.println("Data received.");
        outputStream.close();
        inputStream.close();
         
        System.out.println("File written to: " + saveFile.getAbsolutePath());
         
        // sends response to client
        response.getWriter().print("UPLOAD DONE");
		
		ObjectMapper mapper = new ObjectMapper();
		request.setCharacterEncoding("UTF-8");
		response.setContentType("application/json");
		FoodsModel foodsModel = HttpUtil.of(request.getReader()).toModel(FoodsModel.class);	
		foodsModel.setCreatedBy(((UserModel) SessionUtil.getInstance().getValue(request, "USERMODEL")).getUserName());
		foodsModel = foodsService.save(foodsModel);
		mapper.writeValue(response.getOutputStream(), foodsModel);
	}

	protected void doPut(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		ObjectMapper mapper = new ObjectMapper();
		request.setCharacterEncoding("UTF-8");
		response.setContentType("application/json");
		FoodsModel updateFoods = HttpUtil.of(request.getReader()).toModel(FoodsModel.class);
		updateFoods.setCreatedBy(((UserModel) SessionUtil.getInstance().getValue(request, "USERMODEL")).getUserName());
		updateFoods = foodsService.update(updateFoods);
		mapper.writeValue(response.getOutputStream(), updateFoods);

	}
	protected void doDelete(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		ObjectMapper mapper = new ObjectMapper();
		request.setCharacterEncoding("UTF-8");
		response.setContentType("application/json");
		FoodsModel foodsModel = HttpUtil.of(request.getReader()).toModel(FoodsModel.class);
		foodsService.delete(foodsModel.getIds());
		mapper.writeValue(response.getOutputStream(), "{}");
	}
}
